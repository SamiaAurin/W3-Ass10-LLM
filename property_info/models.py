# property_info/models.py


from django.db import models

class HotelManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().using('travel')

class Hotel(models.Model):
    city_id = models.IntegerField()
    hotel_id = models.BigIntegerField()
    hotel_name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    hotel_img = models.CharField(max_length=255)
    rating = models.FloatField()
    room_type = models.CharField(max_length=255)
    location = models.TextField()
    latitude = models.DecimalField(max_digits=9, decimal_places=6)
    longitude = models.DecimalField(max_digits=9, decimal_places=6)
    description = models.TextField(null=True, blank=True)  # New column for description

    # Use the custom manager
    objects = HotelManager()

    class Meta:
        managed = False  # Django won't manage this table
        db_table = "hotels"  # Name of the table in the database
        

    def __str__(self):
        return f"{self.hotel_name} ({self.hotel_id})"

class PropertySummary(models.Model):
    property_id = models.IntegerField()  # Reference to the property
    summary = models.TextField()  # Summary generated by the LLM model

    class Meta:
        db_table = 'property_summary'

    def __str__(self):
        return f"Property ID: {self.property_id} - Summary"
        

class PropertyRatingReview(models.Model):
    property_id = models.IntegerField()  # Reference to the property
    rating = models.FloatField()  
    review = models.TextField()  

    class Meta:
        db_table = 'property_rating_review'

    def __str__(self):
        return f"Property ID: {self.property_id} - Rating: {self.rating}"